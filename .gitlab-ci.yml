stages:
  - build

lint-and-test:
  stage: build
  image: nexus.ex.c-lab.ee:8003/rust-builder
  before_script:
    - rustup component add clippy
  script:
    - cargo clippy -- -Dwarnings
    - cargo build --verbose
    - cargo test --verbose
  cache:
    key: sdl-cargo-target
    paths:
      - target

build-x86-64bit-windows-release:
  stage: build
  needs: ["lint-and-test"]
  image: nexus.ex.c-lab.ee:8003/rust-builder
  script:
    - cargo build --release --target x86_64-pc-windows-gnu
  cache:
    key: sdl-cargo-target
    paths:
      - target

build-and-upload-x86-64bit-linux-release:
  stage: build
  needs: ["lint-and-test"]
  image: nexus.ex.c-lab.ee:8003/rust-builder
  script:
    - cargo build --release --target x86_64-unknown-linux-gnu
    - cargo deb --no-build --target x86_64-unknown-linux-gnu -p sdl-parser-export
    - 'curl -u $OCR_DEPLOYMENT_USER:$OCR_DEPLOYMENT_PASSWORD -X POST -H "Content-Type: multipart/form-data" --data-binary "@./target/x86_64-unknown-linux-gnu/debian/libsdl-parser_0.1.0_amd64.deb" $OCR_APT_REPOSITORY'
  cache:
    key: sdl-cargo-target
    paths:
      - target

build-and-upload-arm-64bit-linux-release:
  stage: build
  needs: ["lint-and-test"]
  image: nexus.ex.c-lab.ee:8003/rust-builder
  script:
    - cargo build --release --target aarch64-unknown-linux-gnu
    - LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):/usr/aarch64-linux-gnu/lib/ cargo deb --no-build --target aarch64-unknown-linux-gnu -p sdl-parser-export
    - 'curl -u $OCR_DEPLOYMENT_USER:$OCR_DEPLOYMENT_PASSWORD -X POST -H "Content-Type: multipart/form-data" --data-binary "@./target/aarch64-unknown-linux-gnu/debian/libsdl-parser_0.1.0_arm64.deb" $OCR_APT_REPOSITORY'
  cache:
    key: sdl-cargo-target
    paths:
      - target

build-and-publish-npm-wrapper:
  stage: build
  image: node:lts
  script:
    - cd node-package
    - yarn
    - '{ echo "$OCR_DEPLOYMENT_USER"; sleep 1; echo "$OCR_DEPLOYMENT_PASSWORD"; sleep 1;  echo "$OCR_NPM_PUBLISH_EMAIL"; } | npm login --registry=$OCR_NPM_REPOSITORY'
    - npm publish --registry=$OCR_NPM_REPOSITORY

build-and-publish-pip-wrapper:
  stage: build
  image: python:latest
  script:
    - cd python-package
    - python3 -m pip install --upgrade build
    - python3 -m build
    - pip install twine
    - twine upload -u $OCR_DEPLOYMENT_USER -p $OCR_DEPLOYMENT_PASSWORD  --repository-url $OCR_PIP_REPOSITORY  dist/*
