stages:
  - build

lint-and-test:
  stage: build
  image: $DOCKER_REGISTRY_PULL/rust-builder
  before_script:
    - rustup component add clippy
  script:
    - cargo clippy -- -Dwarnings
    - cargo build --verbose
    - cargo tarpaulin --skip-clean --verbose --out Xml
  coverage: '/^\d+.\d+% coverage/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
  only:
    - develop
    - master
    - merge_requests

build-x86-64bit-windows-release:
  stage: build
  needs: ["lint-and-test"]
  image: $DOCKER_REGISTRY_PULL/rust-builder
  script:
    - cargo build --release --target x86_64-pc-windows-gnu
  only:
    - master

build-and-upload-x86-64bit-linux-release:
  stage: build
  needs: ["lint-and-test"]
  image: $DOCKER_REGISTRY_PULL/rust-builder
  script:
    - cargo build --release --target x86_64-unknown-linux-gnu
    - cargo deb --no-build --target x86_64-unknown-linux-gnu -p sdl-parser-export
    - DEB_FILE=$(find ./target/x86_64-unknown-linux-gnu/debian/ -maxdepth 1 -type f -name "*.deb")
    - 'curl -u $OCR_DEPLOYMENT_USER:$OCR_DEPLOYMENT_PASSWORD -X POST -H "Content-Type: multipart/form-data" --data-binary "@$DEB_FILE" $OCR_APT_REPOSITORY'
  only:
    - master

build-and-upload-arm-64bit-linux-release:
  stage: build
  needs: ["lint-and-test"]
  image: $DOCKER_REGISTRY_PULL/rust-builder
  script:
    - cargo build --release --target aarch64-unknown-linux-gnu
    - LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):/usr/aarch64-linux-gnu/lib/ cargo deb --no-build --target aarch64-unknown-linux-gnu -p sdl-parser-export
    - DEB_FILE=$(find ./target/aarch64-unknown-linux-gnu/debian/ -maxdepth 1 -type f -name "*.deb")
    - 'curl -u $OCR_DEPLOYMENT_USER:$OCR_DEPLOYMENT_PASSWORD -X POST -H "Content-Type: multipart/form-data" --data-binary "@$DEB_FILE" $OCR_APT_REPOSITORY'
  only:
    - master

build-and-publish-npm-wrapper:
  stage: build
  image: $DOCKER_REGISTRY_PULL/node:lts
  script:
    - cd node-package
    - yarn global add node-gyp && yarn install --frozen-lockfile
    - '{ echo "$OCR_DEPLOYMENT_USER"; sleep 1; echo "$OCR_DEPLOYMENT_PASSWORD"; } | npm login --registry=$OCR_NPM_REPOSITORY'
    - npm publish --registry=$OCR_NPM_REPOSITORY
  only:
    - master

build-and-publish-pip-wrapper:
  stage: build
  image: $DOCKER_REGISTRY_PULL/python:latest
  script:
    - cd python-package
    - python3 -m pip install --upgrade build
    - python3 -m build
    - pip install twine
    - twine upload -u $OCR_DEPLOYMENT_USER -p $OCR_DEPLOYMENT_PASSWORD  --repository-url $OCR_PIP_REPOSITORY  dist/*
  only:
    - master

build-and-publish-wasm-package:
  stage: build
  image: $DOCKER_REGISTRY_PULL/rust-builder
  script:
    - apt update && apt install -y jq npm && cargo install wasm-pack
    - echo //registry.npmjs.org/:_authToken=$PUBLISH_TOKEN > ~/.npmrc
    - cd wasm-sdl-parser/ && wasm-pack build --target web --release
    - cd pkg/
    - jq '.name = "@open-cyber-range/wasm-sdl-parser"' package.json > tmp.file && mv tmp.file package.json
    - wasm-pack publish --access public
  only:
    - master

publish-crate-to-crateio:
  stage: build
  image: $DOCKER_REGISTRY_PULL/rust-builder
  script:
    - cd /sdl-parser/sdl-parser
    - cargo publish --token $CARGO_REGISTRY_TOKEN
  only:
    - master
